query fetchAuditTypes {
  fetchAuditTypes {
    _id
    Type
    Order
  }
}

query fetchSystemAuditList($includedDeactivated: Boolean) {
  fetchSystemAudits(IncludeDeactivated: $includedDeactivated) {
    _id
    Name
    Description
    Priority
    Active
    IMTrigger_AuditTypes {
      _id
      IMTriggerID
      IMAuditTypeID
      IMAuditType {
        _id
        Type
        Order
      }
    }
  }
}

query verifyAuditLocation($container: searchContainer) {
  findContainer(Container: $container) {
    _id
  }
}

query findContainerInventory($container: searchContainer) {
  findContainer(Container: $container) {
    INVENTORies {
      _id
      InventoryTrackingNumber
    }
  }
}

query findProductCode($productCode: searchProductCode) {
  findProductCode(productCode: $productCode) {
    _id
    ProductCodeNumber
  }
}

query findIMProduct($product: searchProduct) {
  findProduct(Product: $product) {
    _id
    PartNumber
    ProductCodeID
  }
}

query findIMInventory($inventory: searchInventory!) {
  findInventory(Inventory: $inventory) {
    _id
    InventoryTrackingNumber
    Product {
      PartNumber
    }
    Container {
      Barcode
    }
  }
}

query fetchInventory($inventoryIDs: [Int]) {
  fetchInventory(InventoryIDs: $inventoryIDs) {
    _id
    DistributionCenter
    InventoryTrackingNumber
    ParentITN
    BinLocation
    QuantityOnHand
    OriginalQuantity
    DateCode
    Country {
      ISO2
    }
    ROHS
    NotFound
    Suspect
    LocatedInAutostore
    BoundForAutostore
    Product {
      PartNumber
      ProductCode {
        ProductCodeNumber
      }
      Description
      Velocity
      UOM
      MICPartNumber
      Autostore
      ProductTier
      PackQty
      PackType
    }
  }
}

query findIMInventories(
  $itn: String,
  $barcodeStart: String, 
  $barcodeEnd: String,
  $prc: String, 
  $partNumber: String) {
  findIMInventories(
    ITN: $itn
    BarcodeStart: $barcodeStart, 
    BarcodeEnd: $barcodeEnd,
    PRC: $prc, 
    PartNumber: $partNumber) {
    _id
    InventoryTrackingNumber
    oldID
  }
}

query findIMPRCInventories($prc: String) {
  findIMPRCInventories(PRC: $prc) {
    _id
  }
}

query findIMPRCPartNumberInventories($prc: String, $partNumber: String) {
  findIMPRCPartNumberInventories(PRC: $prc, PartNumber: $partNumber) {
    _id
  }
}

query validateFilter(
  $itn: String
  $locationStart: String
  $locationEnd: String
  $prc: String
  $partNumber: String
) {
  validateFilter(
    ITN: $itn
    LocationStart: $locationStart
    LocationEnd: $locationEnd
    PRC: $prc
    PartNumber: $partNumber
  )
}

query findNextAudit($userID: Int, $barcode: String, $distributionCenter: String) {
  findNextAudit(UserID: $userID, Barcode: $barcode, DistributionCenter: $distributionCenter) {
    _id
    TypeID
    InventoryID
    Type
    UserID
    Order
    InventoryTrackingNumber
    ParentITN
    Barcode
    ProductID
    DateCode
    COO
    ROHS
    QuantityOnHand
    OriginalQuantity
    NotFound
    Suspect
    LocatedInAutostore
    BoundForAutostore
    PartNumber
    Description
    ProductCodeID
    ProductCodeNumber
    ProductTier
    ProductType
    ProductTypeDescription
    Velocity
    LastUpdated
    CreatedDatetime
    Priority
    MICPartNumber
    UOM
    Autostore
    PackType
    PackQty
    Cost
  }
}

query fetchGlobalMessages($inventoryId: Int) {
  fetchGlobalMessages(InventoryID: $inventoryId) {
    Message
  }
}

query getNextSubAudit($inventoryID: Int, $userID: Int) {
  getNextSubAudit(InventoryID: $inventoryID, UserID: $userID) {
    _id
    TypeID
    InventoryID
    Type
    UserID
    Order
    InventoryTrackingNumber
    ParentITN
    Barcode
    ProductID
    DateCode
    COO
    ROHS
    QuantityOnHand
    OriginalQuantity
    NotFound
    Suspect
    LocatedInAutostore
    BoundForAutostore
    PartNumber
    Description
    ProductCodeID
    ProductCodeNumber
    ProductTier
    ProductType
    ProductTypeDescription
    Velocity
    LastUpdated
    CreatedDatetime
    Priority
    MICPartNumber
    UOM
    Autostore
    PackType
    PackQty
    Cost
  }
}

query getSearchLocation($barcode: String, $level: Int) {
  getSearchLocation(Barcode: $barcode, Level: $level) {
    _id
    Barcode
  }
}

query getSearchLocations($barcode: String) {
  getSearchLocations(Barcode: $barcode) {
    _id
    Barcode
  }
}

query validateAssignment($auditID: Int, $userID: Int) {
  validateAssignment(AuditID: $auditID, UserID: $userID)
}

query getIMAdjustReasons {
  getIMAdjustReasons {
    _id
    Reason
  }
}

query getAuditCount {
  getAuditCount
}

query fetchInventoryAudits($inventoryId: Int) {
  fetchInventoryAudits(InventoryID: $inventoryId) {
    Type {
      Type
    }
  }
}

query fetchPreviousLocation(
  $itn: String!
  $binlocation: String!
) {
  fetchPreviousLocation(
    ITN: $itn
    BinLocation: $binlocation
  ) {
    StatusCode
    StatusMessage
  }
}

mutation clearAudits($username: String, $distributionCenter: String) {
  clearAudits(Username: $username, DistributionCenter: $distributionCenter) {
    _id
  }
}

mutation clearAuditsFromTimeout($userID: Int) {
  clearAuditsFromTimeout(
    UserID: $userID
  ) {
    _id
  }
}

mutation updateLastUpdated($inventoryID: Int, $typeID: Int, $lastUpdated: String) {
  updateLastUpdated(InventoryID: $inventoryID, TypeID: $typeID, LastUpdated: $lastUpdated) {
    _id
  }
}

mutation insertAudits($audits: [inputAudit]) {
  insertAudits(Audits: $audits) {
    _id
  }
}

mutation insertSuspect(
  $suspect: [inputSuspect]
) {
  insertSuspect(Suspect: $suspect) {
    _id
  }
}

mutation inventoryUpdate(
  $user: String!
  $itn: String!
  $quantity: String
  $dateCode: String
  $country: String
  $rohs: String
  $reason: String!
  $suspect: String
  $binlocation: String
  $verificationState: String
) {
  inventoryUpdate(
    User: $user
    ITN: $itn
    DateCode: $dateCode
    CountryOfOrigin: $country
    ROHSFlag: $rohs
    QuantityOnHand: $quantity
    AdjustmentReason: $reason
    Suspect: $suspect
    BinLocation: $binlocation
    VerificationState: $verificationState
  ) {
    StatusCode
    StatusMessage
  }
}

mutation recreateITN(
  $user: String!
  $itn: String!
  $warehouse: String!
  $binlocation: String!
  $quantity: String!
) {
  recreateITN(
    User: $user
    ITN: $itn
    WAREHOUSE: $warehouse
    BINLOCATION: $binlocation
    QUANTITY: $quantity
  ) {
    StatusCode
    StatusMessage
  }
}

mutation deleteAudit(
  $inventoryID: Int
  $typeID: Int
) {
  deleteAudit(
    InventoryID: $inventoryID
    TypeID: $typeID
  ) {
    _id
  }
}

mutation deleteAudits($inventoryID: Int) {
  deleteAudits(
    InventoryID: $inventoryID
  ) {
    _id
  }
}

mutation deleteAuditsList($inventoryIDs: [Int]) {
  deleteAuditsList(InventoryIDs: $inventoryIDs)
}

mutation closeAudit(
  $inventoryID: Int
  $typeID: Int
) {
  closeAudit(
    InventoryID: $inventoryID
    TypeID: $typeID
  ) {
    _id
  }
}

mutation closeAudits(
  $itn: String
) {
  closeAudits(ITN: $itn) { 
    _id 
    InventoryTrackingNumber
  }
}

mutation clearTimeoutAudits($seconds: Int) {
  clearTimeoutAudits(Seconds: $seconds) {
    _id
  }
}

mutation updateSystemTrigger(
  $triggerId: Int, 
  $trigger: imTrigger, 
  $auditTypes: [Int]) {
    updateSystemTrigger(
      TriggerID: $triggerId,
      Trigger: $trigger,
      AuditTypes: $auditTypes) {
        _id
    }
}

mutation insertSystemTrigger(
  $trigger: imTrigger,
  $auditTypes: [Int]) {
    insertSystemTrigger(
      Trigger: $trigger,
      AuditTypes: $auditTypes) {
        _id
    }
}