query fetchPrinterStation {
  fetchPrinterStation
}

query verifyITNforQc($Inventory: searchInventory!) {
  findInventory(Inventory: $Inventory) {
    ParentITN
    QuantityOnHand
    ROHS
    DateCode
    CountryOfOrigin
    ORDERLINEDETAILs {
      _id
      BinLocation
      StatusID
      OrderLine {
        OrderLineNumber
      }
      Order {
        _id
        DistributionCenter
        OrderNumber
        NOSINumber
        CustomerNumber
      }
    }
    Product {
      ProductCode
      PartNumber
    }
  }
}

query fetchProductInfoFromMerp($ProductList: [String]!) {
  fetchProductInfoFromMerp(ProductList: $ProductList) {
    HazardMaterialLevel
    MICPartNumber
    UnitOfMeasure
  }
}

query qcGlobalMessage(
  $CustomerNumber: String!
  $DistributionCenter: String!
  $OrderNumber: String!
  $OrderLineNumber: String!
  $ProductCode: String!
  $PartNumber: String!
) {
  fetchOrderLineMessage(
    CustomerNumber: $CustomerNumber
    DistributionCenter: $DistributionCenter
    OrderNumber: $OrderNumber
    OrderLineNumber: $OrderLineNumber
  ) {
    comments
  }
  fetchPartMessage(ProductCode: $ProductCode, PartNumber: $PartNumber) {
    comments
  }
}

mutation printITNLabel($InventoryTrackingNumber: String!, $Station: String!) {
  printITNLabel(
    InternalTrackingNumber: $InventoryTrackingNumber
    Station: $Station
  ) {
    success
    message
  }
}

mutation holdQCOrder(
  $OrderLineDetailID: Int!
  $InventoryTrackingNumber: String!
  $Status: String!
  $Station: String!
  $StatusID: Int!
  $log: [insertUserEventLog]!
) {
  holdQCOrder(
    InternalTrackingNumber: $InventoryTrackingNumber
    Status: $Status
    Station: $Station
  ) {
    success
    message
  }

  updateOrderLineDetail(
    _id: $OrderLineDetailID
    OrderLineDetail: { StatusID: $StatusID }
  )

  insertUserEventLogs(log: $log) {
    _id
  }
}

mutation updateAfterQcVerify(
  $Inventory: updateInventory!
  $InventoryTrackingNumber: String!
) {
  updateInventory(
    Inventory: $Inventory
    InventoryTrackingNumber: $InventoryTrackingNumber
  )
}

query findNewAfterUpdateBin($InventoryTrackingNumber: String!) {
  findInventory(
    Inventory: { InventoryTrackingNumber: $InventoryTrackingNumber }
  ) {
    _id
    ORDERLINEDETAILs {
      BinLocation
    }
  }
}

query verifyQCRepack($Container: searchContainer!, $Order: searchOrder!) {
  findContainer(Container: $Container) {
    _id
    Row
    ContainerTypeID
    INVENTORies {
      InventoryTrackingNumber
      ORDERLINEDETAILs {
        StatusID
        OrderID
      }
    }
  }
  findOrder(Order: $Order) {
    _id
    ORDERLINEDETAILs {
      StatusID
      Inventory {
        InventoryTrackingNumber
        ContainerID
      }
    }
  }
}

mutation updateInventoryAndDetailAfterRepack(
  $InventoryTrackingNumber: String!
  $OrderLineDetailID: Int!
  $Inventory: updateInventory!
  $OrderLineDetail: updateOrderLineDetail!
) {
  updateInventory(
    Inventory: $Inventory
    InventoryTrackingNumber: $InventoryTrackingNumber
  )
  updateOrderLineDetail(
    OrderLineDetail: $OrderLineDetail
    _id: $OrderLineDetailID
  )
}

mutation cleanContainerFromPrevOrder(
  $ContainerID: Int!
  $OrderID: Int!
  $Inventory: updateInventory!
) {
  cleanContainerFromPrevOrder(
    Inventory: $Inventory
    ContainerID: $ContainerID
    OrderID: $OrderID
  )
}

mutation updateMerpAfterQcRepack(
  $InventoryTrackingNumber: String!
  $DateCode: String!
  $CountryOfOrigin: String!
  $ROHS: String!
  $CountMethod: String!
) {
  changeQCLineInfo(
    InternalTrackingNumber: $InventoryTrackingNumber
    DateCode: $DateCode
    CountryOfOrigin: $CountryOfOrigin
    ROHS: $ROHS
    CountMethod: $CountMethod
  ) {
    success
    message
  }
}

mutation updateMerpForLastLineAfterQCRepack(
  $OrderNumber: String!
  $NOSINumber: String!
  $Status: String!
  $UserOrStatus: String
) {
  updateMerpOrderStatus(
    OrderNumber: $OrderNumber
    NOSINumber: $NOSINumber
    Status: $Status
    UserOrStatus: $UserOrStatus
  ) {
    success
    message
  }
  clearMerpTote(OrderNumber: $OrderNumber, NOSINumber: $NOSINumber) {
    success
    message
  }
}
