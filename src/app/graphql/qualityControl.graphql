query fetchPrinterStation {
  fetchPrinterStation
}

query verifyITNforQc(
  $DistributionCenter: String!
  $InventoryTrackingNumber: String!
) {
  findInventory(
    Inventory: {
      DistributionCenter: $DistributionCenter
      InventoryTrackingNumber: $InventoryTrackingNumber
    }
  ) {
    _id
    ParentITN
    ROHS
    DateCode
    Country {
      ISO2
    }
    ORDERLINEDETAILs {
      _id
      StatusID
      Quantity
      BinLocation
      WMSPriority
      OrderLine {
        OrderLineNumber
      }
      Order {
        _id
        DistributionCenter
        OrderNumber
        NOSINumber
        ShipmentMethod {
          _id
          ShippingMethod
          PriorityPinkPaper
        }
        Customer {
          CustomerNumber
          CustomerTier
        }
      }
    }
    Product {
      ProductCode {
        ProductCodeNumber
      }
      ProductTier
      PartNumber
    }
  }
}

query fetchProductInfoFromMerp($ProductList: [String]!) {
  fetchProductInfoFromMerp(ProductList: $ProductList) {
    HazardMaterialLevel
    MICPartNumber
    UnitOfMeasure
  }
}

query qcGlobalMessage(
  $CustomerNumber: String!
  $DistributionCenter: String!
  $OrderNumber: String!
  $OrderLineNumber: String!
  $ProductCode: String!
  $PartNumber: String!
) {
  fetchOrderLineMessage(
    CustomerNumber: $CustomerNumber
    DistributionCenter: $DistributionCenter
    OrderNumber: $OrderNumber
    OrderLineNumber: $OrderLineNumber
  ) {
    comments
  }
  fetchPartMessage(ProductCode: $ProductCode, PartNumber: $PartNumber) {
    comments
  }
}

mutation printITNLabel($InventoryTrackingNumber: String!, $Station: String!) {
  printITNLabel(
    InternalTrackingNumber: $InventoryTrackingNumber
    Station: $Station
  ) {
    success
    message
  }
}

mutation holdQCOrder(
  $OrderLineDetailID: Int!
  $InventoryTrackingNumber: String!
  $Status: String!
  $Station: String!
  $StatusID: Int!
  $log: [insertUserEventLog]!
) {
  holdQCOrder(
    InternalTrackingNumber: $InventoryTrackingNumber
    Status: $Status
    Station: $Station
  ) {
    success
    message
  }

  updateOrderLineDetail(
    _id: $OrderLineDetailID
    OrderLineDetail: { StatusID: $StatusID }
  )

  insertUserEventLogs(log: $log) {
    _id
  }
}

mutation updateAfterQcVerify(
  $Inventory: updateInventory!
  $InventoryTrackingNumber: String!
) {
  updateInventory(
    Inventory: $Inventory
    InventoryTrackingNumber: $InventoryTrackingNumber
  )
}

query findNewAfterUpdateBin(
  $InventoryTrackingNumber: String!
  $DistributionCenter: String!
) {
  findInventory(
    Inventory: {
      DistributionCenter: $DistributionCenter
      InventoryTrackingNumber: $InventoryTrackingNumber
    }
  ) {
    _id
    ORDERLINEDETAILs {
      _id
      StatusID
      BinLocation
    }
  }
}

query verifyQCRepack(
  $DistributionCenter: String!
  $Barcode: String!
  $OrderID: Int!
) {
  findContainer(
    Container: { DistributionCenter: $DistributionCenter, Barcode: $Barcode }
  ) {
    _id
    Row
    ContainerTypeID
    INVENTORies {
      _id
      InventoryTrackingNumber
      ORDERLINEDETAILs {
        StatusID
        OrderID
      }
    }
  }
  findOrder(Order: { _id: $OrderID }) {
    _id
    ORDERLINEDETAILs {
      StatusID
      Inventory {
        InventoryTrackingNumber
        ContainerID
      }
    }
  }
}

mutation updateInventoryAndDetailAfterRepack(
  $InventoryID: Int!
  $OrderLineDetailID: Int!
  $Inventory: updateInventory!
  $OrderLineDetail: updateOrderLineDetail!
) {
  updateInventory(_id: $InventoryID, Inventory: $Inventory)
  updateOrderLineDetail(
    OrderLineDetail: $OrderLineDetail
    _id: $OrderLineDetailID
  )
}

mutation cleanContainerFromPrevOrder(
  $idList: [Int!]!
  $Inventory: updateInventory!
) {
  updateInventoryList(Inventory: $Inventory, idList: $idList)
}

mutation updateMerpAfterQcRepack(
  $InventoryTrackingNumber: String!
  $DateCode: String!
  $CountryOfOrigin: String!
  $RHOS: String!
  $CountMethod: String!
) {
  changeQCLineInfo(
    InternalTrackingNumber: $InventoryTrackingNumber
    DateCode: $DateCode
    CountryOfOrigin: $CountryOfOrigin
    RHOS: $RHOS
    CountMethod: $CountMethod
  ) {
    success
    message
  }
}

mutation updateMerpForLastLineAfterQCRepack(
  $OrderNumber: String!
  $NOSINumber: String!
  $Status: String!
  $UserOrStatus: String
) {
  updateMerpOrderStatus(
    OrderNumber: $OrderNumber
    NOSINumber: $NOSINumber
    Status: $Status
    UserOrStatus: $UserOrStatus
  ) {
    success
    message
  }
  clearMerpTote(OrderNumber: $OrderNumber, NOSINumber: $NOSINumber) {
    success
    message
  }
}
