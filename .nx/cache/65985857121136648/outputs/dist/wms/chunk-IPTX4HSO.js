import{a as P}from"./chunk-KSUYRJTQ.js";import{a as b,e as D,f as Q,g as S,h as C}from"./chunk-M47XUQY5.js";import{a as O}from"./chunk-YPJKXAYS.js";import{a as o}from"./chunk-I3G2JKLN.js";import{i as y}from"./chunk-LCEARWCQ.js";import{a as g}from"./chunk-4AGTE6D3.js";import{a as E}from"./chunk-PLQ7TNCQ.js";import{Aa as p,Ab as v,C as N,H as m,a as s,b as u,na as R,qa as h,va as _,zb as n}from"./chunk-N7LPRJLK.js";var J=(()=>{let d=class d{constructor(e,t,i,a,r,L,l,F){this._findReceiptH$=e,this._findverifyInfo$=t,this._fetchLinesForOverReceipt$=i,this._checkHeader=a,this._updateReceiptLine=r,this._eventLog=L,this._insertLog=l,this._userInfo=F,this._receiptState=v({headerID:null,PartNumber:null,Quantity:null,ReceiptLine:null,receiptList:[]}),this.headerID=n(()=>this._receiptState().headerID),this.receiptLine=n(()=>this._receiptState().ReceiptLine),this.quantity=n(()=>this._receiptState().Quantity),this.receiptInfoAfterFilter=n(()=>{if(!this._receiptState().receiptList.length)return null;let c=[...this._receiptState().receiptList];return this._receiptState().ReceiptLine?c.filter(f=>f.ReceiptLineID===this._receiptState().ReceiptLine):(this._receiptState().PartNumber&&(c=c.filter(f=>f.PartNumber.trim().toLocaleLowerCase()===this._receiptState().PartNumber.trim().toLocaleLowerCase())),this._receiptState().Quantity&&(c=c.filter(f=>f.ExpectedQuantity===this._receiptState().Quantity)),c)}),this.ExpectQuantity=n(()=>this.receiptInfoAfterFilter()[0].ExpectedQuantity),this.partNumber=n(()=>this.receiptInfoAfterFilter()[0].PartNumber),this.productCode=n(()=>this.receiptInfoAfterFilter()[0].ProductCodeNumber),this.purchaseLineNumber=n(()=>this.receiptInfoAfterFilter()[0].PurchaseLineNumber),this.purchaseOrderNumber=n(()=>this.receiptInfoAfterFilter()[0].PurchaseOrderNumber),this.openQuantityForPOs=n(()=>this.receiptInfoAfterFilter()[0].QuantityOnOrder-this.receiptInfoAfterFilter()[0].QuantityReceived),this.OverReceivingTableinfo=n(()=>this._receiptState().receiptList.map(c=>({ID:c.ReceiptLineID,ReceiptHeader:c.ReceiptHID,Quantity:c.ExpectedQuantity,PartNumber:c.PartNumber,PurchaseOrderNumber:c.PurchaseOrderNumber,QuantityOnOrder:c.QuantityOnOrder,Status:c.Status})))}resetAfterPart(){this._receiptState.update(e=>({headerID:e.headerID,PartNumber:null,Quantity:null,ReceiptLine:null,receiptList:[]}))}updateheaderID(e){this._receiptState.update(t=>u(s({},t),{headerID:e}))}updatePartNumber(e){this._receiptState.update(t=>u(s({},t),{PartNumber:e}))}updateQuantity(e){this._receiptState.update(t=>u(s({},t),{Quantity:e}))}updateReceiptLine(e){this._receiptState.update(t=>u(s({},t),{ReceiptLine:e})),this._receiptState().receiptList.map(t=>{t.ReceiptLineID===e&&this._receiptState.update(i=>u(s({},i),{headerID:t.ReceiptHID,Quantity:t.ExpectedQuantity,PartNumber:t.PartNumber}))})}updateReceiptList(e){this._receiptState.update(t=>u(s({},t),{receiptList:e}))}updateExpectQuantity(e){let t=this._receiptState().receiptList.map(i=>i.ReceiptLineID===this._receiptState().ReceiptLine?u(s({},i),{ExpectedQuantity:e}):i);this._receiptState.update(i=>u(s({},i),{receiptList:t}))}checkReceiptHeader$(e){return this._checkHeader.fetch({id:e}).pipe(h(t=>{if(!t.data.findReceiptH?._id)throw new Error("Can't find this Receipt!");this.updateheaderID(e)}),R(()=>{let t=[{ReceiptHeader:e,UserName:this._userInfo.userName,UserEventID:o.Event_Receiving_Start}];return this._eventLog.initEventLog({UserName:this._userInfo.userName,EventTypeID:o.Event_Receiving_Start,Log:JSON.stringify({ReceiptHeader:e})}),this._insertLog.mutate({oldLogs:t,eventLogs:this._eventLog.eventLog})}))}findLines$(){return this.headerID()?this._findReceiptH$.fetch({ReceiptHID:this.headerID(),statusID:o.Receipt_Entered},{fetchPolicy:"network-only"}).pipe(h(e=>{if(!e.data.findReceiptInfoByIdAndStatus)throw{name:"error",message:"Can't find this Receipt!"};if(!e.data.findReceiptInfoByIdAndStatus.RECEIPTLs?.length)throw{name:"warning",message:"No avaiable line under this Receipt!"}}),m(e=>e.data.findReceiptInfoByIdAndStatus),h(e=>{P.devOnly("ReceiptInfo","findLines",e.RECEIPTLs[0].Product.PartNumber),P.devOnly("ReceiptInfo","findLines",e.RECEIPTLs[0].ExpectedQuantity);let t=e.RECEIPTLs.map(i=>({ReceiptHID:e._id,PurchaseLineNumber:i.RECEIPTLDs[0].PurchaseOrderL.LineNumber,PurchaseOrderNumber:i.RECEIPTLDs[0].PurchaseOrderL.PurchaseOrderH.PurchaseOrderNumber,QuantityOnOrder:i.RECEIPTLDs[0].PurchaseOrderL.QuantityOnOrder,QuantityReceived:i.RECEIPTLDs[0].PurchaseOrderL.QuantityReceived,UnitOfMeasure:i.RECEIPTLDs[0].PurchaseOrderL.UnitOfMeasure,ReceiptLineID:i.RECEIPTLDs[0]._id,Status:i.RECEIPTLDs[0].ReceiptStatus.Name,ReceiptLineNumber:i.LineNumber,ExpectedQuantity:i.ExpectedQuantity,DateCode:i.DateCode,ROHS:i.ROHS,ProductID:i.ProductID,PartNumber:i.Product.PartNumber,ProductCodeNumber:i.Product.ProductCode.ProductCodeNumber}));this.updateReceiptList(t)})):N()}fetchReceiptLinesForOverReceipt$(e){return this._fetchLinesForOverReceipt$.fetch({PurchaseOrder:e},{fetchPolicy:"network-only"}).pipe(m(t=>t.data.findPurchaseOrderH.PURCHASEORDERLs),h(t=>{if(!t.some(i=>i.RECEIPTLDs.length>0))throw{name:"error",message:"Can't find this Receipt!"}}),h(t=>{let i=[];t.forEach(a=>{a.RECEIPTLDs.forEach(r=>{let L={PurchaseLineNumber:a.LineNumber,PurchaseOrderNumber:e.trim(),QuantityOnOrder:a.QuantityOnOrder,QuantityReceived:a.QuantityReceived,UnitOfMeasure:a.UnitOfMeasure,ReceiptHID:r.ReceiptL.ReceiptHID,ReceiptLineID:r.ReceiptL._id,Status:r.ReceiptStatus.Name,ReceiptLineNumber:r.ReceiptL.LineNumber,ExpectedQuantity:r.ReceiptL.ExpectedQuantity,DateCode:r.ReceiptL.DateCode,ROHS:r.ReceiptL.ROHS,ProductID:r.ReceiptL.ProductID,PartNumber:r.ReceiptL.Product.PartNumber,ProductCodeNumber:r.ReceiptL.Product.ProductCode.ProductCodeNumber};i.push(L)})}),this.updateReceiptList(i)}),R(()=>{let t=[{PurchaseOrderNumber:e,UserName:this._userInfo.userName,UserEventID:o.Event_Receiving_OverReceiving_start}];return this._eventLog.initEventLog({UserName:this._userInfo.userName,EventTypeID:o.Event_Receiving_OverReceiving_start,Log:JSON.stringify({PurchaseOrderNumber:e})}),this._insertLog.mutate({oldLogs:t,eventLogs:this._eventLog.eventLog})}))}findVerifyInfo$(){let e=this.receiptInfoAfterFilter()[0];return this._findverifyInfo$.fetch({PartNumber:e.PartNumber,ProductCode:e.ProductCodeNumber}).pipe(m(t=>({ProductID:e.ProductID,ProductCode:e.ProductCodeNumber,PartNumber:e.PartNumber,MIC:`${E.productImgSource}${t.data.fetchProductMICFromMerp}.jpg`,message:t.data.fetchPartMessage.comments,kitInfo:"",UoM:e.UnitOfMeasure})))}updateQuanityForOverReceiving$(e,t){let i=this.receiptInfoAfterFilter()[0].ExpectedQuantity;return this._updateReceiptLine.mutate({_id:this.receiptInfoAfterFilter()[0].ReceiptLineID,ExpectedQuantity:e}).pipe(h(()=>{this.updateExpectQuantity(e)}),R(()=>{let a=this.receiptInfoAfterFilter()[0],r={UserName:this._userInfo.userName,UserEventID:o.Event_Receiving_OverReceiving_done,ReceiptLine:a.ReceiptLineNumber,Quantity:a.ExpectedQuantity,PurchaseOrderNumber:a.PurchaseOrderNumber,PurchaseLine:a.PurchaseLineNumber,Message:`${t} from ${i} to ${e}`},L={EventTypeID:o.Event_Receiving_OverReceiving_done,UserName:this._userInfo.userName,Log:JSON.stringify(u(s(s({},JSON.parse(this._eventLog.eventLog.Log)),a),{Message:`${t} from ${i} to ${e}`}))};return this._insertLog.mutate({oldLogs:r,eventLogs:L})}))}};d.\u0275fac=function(t){return new(t||d)(p(D),p(S),p(Q),p(b),p(C),p(O),p(y),p(g))},d.\u0275prov=_({token:d,factory:d.\u0275fac});let I=d;return I})();export{J as a};
