import{a as Q}from"./chunk-W6X5OBKE.js";import{a as U}from"./chunk-N327C62I.js";import{a as q}from"./chunk-IPTX4HSO.js";import{a as P}from"./chunk-KSUYRJTQ.js";import{l as w}from"./chunk-FBU3NLE2.js";import{l as B,m as j}from"./chunk-M47XUQY5.js";import{a as E}from"./chunk-YPJKXAYS.js";import{a as u}from"./chunk-I3G2JKLN.js";import{e as O,i as S}from"./chunk-LCEARWCQ.js";import{a as R}from"./chunk-4AGTE6D3.js";import{a as _}from"./chunk-PLQ7TNCQ.js";import{Aa as o,Ab as l,Ba as b,H as T,I as y,a as c,aa as C,b as p,na as g,qa as m,va as D,zb as h}from"./chunk-N7LPRJLK.js";var tt=(()=>{let a=class a{constructor(t,e,i,n,s,f,d,L,r){this._receipt=t,this._partInfo=e,this._container=i,this._itn=n,this._update=s,this._printer=f,this._insertLog=d,this._eventLog=L,this._userInfo=r,this.itnCount=b(U),this._ITNList=l([]),this.ITNList=h(()=>this._ITNList()),this.remaining=h(()=>{let I=0;return this._ITNList().map(v=>I+=v.quantity),this._receipt.ExpectQuantity()-I}),this.currentItnIndex=h(()=>{let I=-1;return this._ITNList().map((v,k)=>v.ITN?(I=k,!0):!1),I})}initItnList(){let e=this.itnCount.getQuantityList().map(i=>({quantity:i,ITN:null,BinLocation:null,ContainerID:null,datecode:this._partInfo.receiptInfo.DateCode,countryID:this._partInfo.receiptInfo.CountryID,ISO3:this._partInfo.receiptInfo.ISO3}));this._ITNList.set(e)}insertNewItn(){this._ITNList.update(t=>(t.push({quantity:0,ITN:null,BinLocation:null,ContainerID:null,datecode:this._partInfo.receiptInfo.DateCode,countryID:this._partInfo.receiptInfo.CountryID,ISO3:this._partInfo.receiptInfo.ISO3}),[...t]))}removeItn(t){this._ITNList.update(e=>(e.splice(t,1),[...e]))}updateItnListQty(t,e){this._ITNList.update(i=>(i[e].quantity=t,[...i]))}updateItnlistInfo(t,e){this._ITNList.update(i=>(i[e]=p(c({},i[e]),{datecode:t.datecode,ISO3:t.ISO3,countryID:t.countryID}),[...i]))}updateItnListITN(t,e){this._ITNList.update(i=>(i[e].ITN=t,[...i]))}updateItnListBin(t,e,i){this._ITNList.update(n=>(n[i].BinLocation=t,n[i].ContainerID=e,[...n]))}getItnInList(t){return h(()=>this._ITNList()[t].ITN)}printReceivingLabel$(){return this._itn.mutate({LocationCode:_.DistributionCenter},{fetchPolicy:"network-only"}).pipe(m(t=>{this.updateItnListITN(t.data.createITN,this.currentItnIndex()+1),P.devOnly("LabelService","printReceivingLabel",t.data.createITN)}),g(t=>y({print:this._printer.printITN$(t.data.createITN,this._receipt.productCode(),this._receipt.partNumber()),log:this._insertLog.mutate({oldLogs:{UserName:this._userInfo.userName,UserEventID:u.Event_Receiving_GenerateITN,InventoryTrackingNumber:t.data.createITN,PartNumber:this._receipt.partNumber(),ProductCode:this._receipt.productCode(),ReceiptHeader:this._receipt.headerID(),ReceiptLine:this._receipt.receiptLine(),PurchaseOrderNumber:this._receipt.purchaseOrderNumber(),PurchaseLine:this._receipt.purchaseLineNumber()},eventLogs:p(c({},this._eventLog.eventLog),{EventTypeID:u.Event_Receiving_GenerateITN,Log:JSON.stringify(c({InventoryTrackingNumber:t.data.createITN},this._receipt.receiptInfoAfterFilter()[0]))})})})),C(500))}checkBinLocation(t){return this._container.fetch({Barcode:t,DistributionCenter:_.DistributionCenter}).pipe(m(e=>{if(!t.trim())throw new Error("Can't be empty location.");if(!e.data.findContainer?._id||!e.data.findContainer?.Barcode)throw new Error("Can not find this Location!")}),T(e=>(this.updateItnListBin(e.data.findContainer.Barcode,e.data.findContainer._id,this.currentItnIndex()),this._ITNList())))}updateAfterReceving(){let t=this._receipt.receiptInfoAfterFilter()[0],e={DistributionCenter:_.DistributionCenter,ProductID:t.ProductID,ROHS:this._partInfo.receiptInfo.ROHS},i={PartNumber:t.PartNumber,ProductCode:t.ProductCodeNumber,User:this._userInfo.userName,CreatingProgram:"OMS-Receiving",PurchaseOrderNumber:t.PurchaseOrderNumber,PurchaseOrderLine:t.PurchaseLineNumber.toString()},n=t.ReceiptLineID,s=this._ITNList().map(r=>({quantity:r.quantity,ITN:r.ITN,BinLocation:r.BinLocation,ContainerID:r.ContainerID,datecode:r.datecode,countryID:r.countryID,ISO3:r.ISO3})),f=this._update.mutate({ITNList:s,ReceiptLID:n,Inventory:e,info:i}),d=s.map(r=>({UserName:this._userInfo.userName,UserEventID:u.Event_Receiving_UpdateInventory,InventoryTrackingNumber:r.ITN,Quantity:r.quantity,PartNumber:this._receipt.partNumber(),ProductCode:this._receipt.productCode(),ReceiptHeader:this._receipt.headerID(),ReceiptLine:this._receipt.receiptLine(),PurchaseOrderNumber:this._receipt.purchaseOrderNumber(),PurchaseLine:this._receipt.purchaseLineNumber(),Message:r.BinLocation}));d.push({UserName:this._userInfo.userName,UserEventID:u.Event_Receiving_ReceiptLineDone,PartNumber:this._receipt.partNumber(),ProductCode:this._receipt.productCode(),ReceiptHeader:this._receipt.headerID(),ReceiptLine:this._receipt.receiptLine(),PurchaseOrderNumber:this._receipt.purchaseOrderNumber(),PurchaseLine:this._receipt.purchaseLineNumber()});let L=s.map(r=>p(c({},this._eventLog.eventLog),{EventTypeID:u.Event_Receiving_UpdateInventory,Log:JSON.stringify(p(c({},this._receipt.receiptInfoAfterFilter()[0]),{InventoryTrackingNumber:r.ITN,Quantity:r.quantity,BinLocation:r.BinLocation}))}));return L.push(p(c({},this._eventLog.eventLog),{EventTypeID:u.Event_Receiving_ReceiptLineDone})),f.pipe(m(r=>{if(r.data.createInventoryFromOMS!==!0)throw new Error("Can't update Invenotry to MERP!")}),g(()=>this._insertLog.mutate({oldLogs:d,eventLogs:L})))}verifyItnListBinLocation(){let t=[],e=[];if(this._ITNList().map((i,n)=>{!i.BinLocation||!i.ContainerID?t.push(n):e.push(n)}),!e.length)throw new Error("Invalid ITN information!");if(t.length){let i=this._ITNList()[e[0]].BinLocation,n=this._ITNList()[e[0]].ContainerID;t.map(s=>{this.updateItnListBin(i,n,s)})}}reset(){this._ITNList.set([])}};a.\u0275fac=function(e){return new(e||a)(o(q),o(Q),o(j),o(O),o(B),o(w),o(S),o(E),o(R))},a.\u0275prov=D({token:a,factory:a.\u0275fac});let N=a;return N})();export{tt as a};
